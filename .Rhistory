pwd
getwd()
TestMatrix <- makeCacheMatrix(matrix(1:4,2,2))
TestMatrix$get()
TestMatrix$getInverse()
cacheSolve(TestMatrix)
cacheSolve(TestMatrix)
TestMatrix <- makeCacheMatrix(matrix(1:4,2,2))
TestMatrix$get()
TestMatrix$getInverse()
cacheSolve(TestMatrix)
cacheSolve(TestMatrix)
TestMatrix()
makeCacheMatrix()
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("inverse cached")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
cacheSolve(x)
TestMatrix <- makeCacheMatrix(matrix(1:4,2,2))
TestMatrix$get()
TestMatrix$getinv()
cacheSolve(TestMatrix)
cacheSolve(TestMatrix)
inv <<- NULL
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("inverse cached")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
TestMatrix <- makeCacheMatrix(matrix(1:4,2,2))
TestMatrix$get()
TestMatrix$getInverse()
cacheSolve(TestMatrix)
cacheSolve(TestMatrix)
TestMatrix <- makeCacheMatrix(matrix(1:4,2,2))
TestMatrix$get()
TestMatrix$getinv()
cacheSolve(TestMatrix)
cacheSolve(TestMatrix)
